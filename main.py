from aiogram import Bot, Dispatcher, F
from aiogram.types import ContentType
import asyncio
from STT import STT, Punct
from messege_bd import data_base as db

# from Schedule import classes
import json
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from threading import Timer

with open("tokens.json") as complex_data:
    data = complex_data.read()
    tokens = json.loads(data)

main_token = tokens["main_token"]

help_command = """
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–≥–æü§Ø
–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/help - –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/discription - –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
/save <–ö–∞—Ç–µ–≥–æ—Ä–∏—è> <–ù–∞–∑–≤–∞–Ω–∏–µ> - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫/—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
/savedfiles - –∫–æ–º–∞–Ω–¥–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
/deletesavedfiles - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
"""
start_command = """
–ü—Ä–∏–≤–µ—Ç!üëã –Ø –±–æ—Çü§ñ, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µü§Ø. \n
/help - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
"""
discription_command = """
–ë–æ—Ç —É–º–µ–µ—Ç –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–πü§Ø. –¢–∞–∫–∂–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
–°–æ–∑–¥–∞—Ç–µ–ª–∏:
@maxkuklavodüôÉ
@Albert_Nosachenkoü§ê
@yourocculticT20üßê
–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:
@jezvGGüíÄ
"""
savedfiles_command = """
–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–∏ —Ñ–∞–π–ª—ã.
"""
categories_message = """
–í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–∏ —Ñ–∞–π–ª—ã.
"""
deletesavedfiles_command = """
–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
"""
deletecategories_message = """
–í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.
"""


# –¶–∏–∫–ª –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç
everytenmin = """—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ –≤–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–Ω –º–Ω–µ —Ö–æ—Ä–æ—à–æ –Ω–∞–ø–∏—Å–∞–ª 
–≤—Å–µ –∑–∞–ø—è—Ç—ã–µ –∏ —Ä–∞—Å—Å—Ç–∞–≤–∏–ª —Ç–∞–º –ø–æ—Ç–æ–º –≤–æ—Ç –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–∏–ª –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å 
–º–Ω–µ –∫–∞–∫ –±—É–¥—Ç–æ –±—ã –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –ø–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∫–æ–≥–æ-—Ç–æ —Ç–æ–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤–µ—Ä–Ω–æ–µ –Ω–µ –∑–Ω–∞—é –∏ —Å–µ–π—á–∞—Å —è —Å–Ω–æ–≤–∞
–æ—Ç–∫—Ä—ã–ª –≤—Ä–æ–¥–µ –±—ã —Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—è—Ç—ã–µ"""


# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(token=main_token)
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
sort = []
categories = []
action = ""
Admin_ID = 0
bd = db("P3lv1c_bone.db")
bd.start()
bd.create(
    "saves",
    {
        "mes_id": "text",
        "chat_id": "text",
        "id_category": "integer",
        "name": "text",
    },
)
for i in range(1, 8):
    categories.append(bd.get("categories", {"id": i})[1])

bd.stop()


# –ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.message(Command("start"))
async def main(message):
    await message.answer(start_command)


# –ö–æ–º–∞–Ω–¥–∞ /help, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
@dp.message(Command("help"))
async def main(message):
    await message.answer(help_command)


# –ö–æ–º–∞–¥–Ω–∞ /discription, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
@dp.message(Command("discription"))
async def main(message):
    await message.answer(discription_command)


"""# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
@dp.message(Command("zaprasp"))
async def main(message):
    lessons = classes()
    await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

    await message.answer(lessons)"""


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(Command("save"))
async def main(message, command):
    # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∏–∫–∞–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Ç–æ
    # command.args –±—É–¥–µ—Ç None
    if command.args is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
        return
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤—Å—Ç—Ä–µ—á–Ω–æ–º—É –ø—Ä–æ–±–µ–ª—É
    try:
        category, name = command.args.split(" ", maxsplit=1)
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –º–µ–Ω—å—à–µ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π, –≤—ã–ª–µ—Ç–∏—Ç ValueError
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/save <–ö–∞—Ç–µ–≥–æ—Ä–∏—è> <–ù–∞–∑–≤–∞–Ω–∏–µ>"
        )
        return
    global categories, id_category
    category=category.lower()
    bd.start()
    if category not in categories:
        id_category = bd.get('categories',{'name':"–¥—Ä—É–≥–æ–µ"})[0]
        bd.insert('saves',{'mes_id': str(message.message_id), 'chat_id': str(message.chat.id), 'id_category': id_category, 'name': name})
        await message.reply(
            f"–¢–∞–∫ –∫–∞–∫ –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <{category}> –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: <–î—Ä—É–≥–æ–µ>"
        )
    else:
        id_category = bd.get('categories',{'name':category})[0]
        bd.insert('saves',{'mes_id': str(message.message_id), 'chat_id': str(message.chat.id), 'id_category': id_category, 'name': name})
        await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    bd.stop()


# # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ—Å—Ç—É–ø–Ω–∞—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
# @dp.message(Command("deletesavedfiles"))
# async def main(message):
#     truefalse = True
#     member = await bot.get_chat_member(message.chat.id, message.from_user.id)
#     for x in member:
#         if "member" in x:
#             truefalse = False
#         break
#     if truefalse == False:
#         await message.answer("–í—ã –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
#     else:
#         global categories, Admin_ID

#         Admin_ID = message.from_user.id

#         # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#         builder = InlineKeyboardBuilder()

#         builder.add(
#             *[
#                 InlineKeyboardButton(text=item, callback_data="del_" + item)
#                 for item in categories
#             ]
#         )

#         # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ—Ç–≤–µ—Ç–µ
#         builder.adjust(3)
#         await message.answer(deletesavedfiles_command, reply_markup=builder.as_markup())


# # –í—ã–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
# @dp.callback_query(F.data.startswith("del_"))
# async def callback(callback):
#     global sort, action, Admin_ID
#     if callback.from_user.id == Admin_ID:
#         action = callback.data.split("_")[1]
#         builder = InlineKeyboardBuilder()

#         category = filter(lambda x: x["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == action, sort)
#         builder.add(
#             *[
#                 InlineKeyboardButton(
#                     text=item["–ò–º—è"], callback_data="delet_" + item["Message_id"]
#                 )
#                 for item in category
#             ]
#         )

#         builder.adjust(3)
#         await callback.message.answer(
#             deletecategories_message, reply_markup=builder.as_markup()
#         )


# # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# @dp.callback_query(F.data.startswith("delet_"))
# async def callback(callback):
#     global sort, Admin_ID

#     if callback.from_user.id == Admin_ID:
#         message = callback.data.split("_")[1]

#         category = filter(lambda x: x["Message_id"] == message, sort)

#         for item in category:
#             sort.remove(item)
#         await callback.message.answer("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")


# –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@dp.message(Command("savedfiles"))
async def main(message):
    global categories, chat_id
    chat_id = message.chat.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(
        *[
            InlineKeyboardButton(text=item.capitalize(), callback_data="num_" + f'{num}')
            for num, item in enumerate(categories)
        ]
    )

    # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ—Ç–≤–µ—Ç–µ
    builder.adjust(1)
    await message.answer(savedfiles_command, reply_markup=builder.as_markup())


# –í—ã–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
@dp.callback_query(F.data.startswith("num_"))
async def callback(callback):
    global action, chat_id
    bd.start()
    action = int(callback.data.split('_')[1])+1
    builder = InlineKeyboardBuilder()

    names = bd.get_raw('saves',{"id_category": action, 'chat_id': chat_id})
    bd.stop()
    builder.add(
        *[
            InlineKeyboardButton(
                text=item[3], callback_data="numm_" + item[0]
            )
            for item in names
        ]
    )

    builder.adjust(3)
    await callback.message.answer(categories_message, reply_markup=builder.as_markup())


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
@dp.callback_query(F.data.startswith("numm_"))
async def callback(callback):
    global chat_id
    message = callback.data.split("_")[1]
    await bot.send_message(
            chat_id=chat_id,
            text="–í–æ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            reply_to_message_id=message,
        )


def punctuation():
    _ = Punct(everytenmin)
    print(_)
    Timer(600, punctuation).start()


punctuation()


# –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç (STT)
@dp.message(F.content_type == ContentType.VOICE)
async def audio(message):
    edittext = ""
    # Download audio file
    file_id = await bot.get_file(message.voice.file_id)
    await bot.download_file(file_id.file_path, "audio.ogg")

    # Speech-to-Text convertation
    edittext = STT("audio.ogg")

    msg = await message.reply(edittext)

    punctual = Punct(edittext)
    await bot.edit_message_text(
        chat_id=str(message.chat.id), message_id=str(msg.message_id), text=punctual
    )


# –ü–∞—Å—Ö–∞–ª–∫–∞ —Å –ò–≥–æ—Ä–µ–º
@dp.message(F.content_type == ContentType.TEXT)
async def Hello(message):
    if "–∏ —á—ë" in message.text.lower() or "–∏ —á–µ" in message.text.lower():
        await bot.send_sticker(
            message.chat.id,
            sticker="CAACAgIAAxkBAAJtC2WhNs5jRDj39GBrG9LGAUFt0U8sAAIvKgACWTYQSgyguNjuPct4NAQ",
        )


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ –±–æ—Ç–µ
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
