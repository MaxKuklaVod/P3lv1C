from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ContentType
import asyncio
from STT import STT
from sorted import Sorting
from TokenBot import token_bot
from aiogram.filters.command import Command
import soundfile as sf
import numpy as np
import speech_recognition as sr
from os import path
from pathlib import Path
from aiogram.fsm.state import StatesGroup, State


# –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class states(StatesGroup):
  categor = State()
  name = State()


help_command = """
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–≥–æü§Ø
–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/help - –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/discription - –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
/save <–ö–∞—Ç–µ–≥–æ—Ä–∏—è> <–ù–∞–∑–≤–∞–Ω–∏–µ> - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫/—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
/savedfiles - –∫–æ–º–∞–Ω–¥–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
"""
start_command = """
–ü—Ä–∏–≤–µ—Ç!üëã –Ø –±–æ—Çü§ñ, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µü§Ø. \n
/help - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
"""
discription_command = """
–ë–æ—Ç —É–º–µ–µ—Ç –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–πü§Ø.
–°–æ–∑–¥–∞—Ç–µ–ª–∏:
@maxkuklavodüôÉ
@Albert_Nosachenkoü§ê
@yourocculticT20üßê
–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:
@jezvGGüíÄ
"""
savedfiles_command = """
–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–∏ —Ñ–∞–π–ª—ã.
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:

"""
savedfiles_command_continue = """
–ï—Å–ª–∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–µ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–∞–∫, –∫–∞–∫ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–¥–µ—Å—å.
"""
categories_message = """
–í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–∏ —Ñ–∞–π–ª—ã.
–ù–∞–∑–≤–∞–Ω–∏—è:

"""
categories_message_continue = """
–ï—Å–ª–∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–∞–∫, –∫–∞–∫ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∑–¥–µ—Å—å.
"""

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(token=token_bot)
dp = Dispatcher()


# –ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.message(Command("start"))
async def main(message):
    await message.answer(start_command)


# –ö–æ–º–∞–Ω–¥–∞ /help, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("help"))
async def main(message):
    await message.answer(help_command)


# –ö–æ–º–∞–¥–Ω–∞ /discription, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
@dp.message(Command("discription"))
async def main(message):
    await message.answer(discription_command)


# –ö–æ–º–∞–Ω–¥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
sort = Sorting()
@dp.message(Command("save"))
async def main(message, command):
    # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∏–∫–∞–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Ç–æ
    # command.args –±—É–¥–µ—Ç None
    if command.args is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
        return
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤—Å—Ç—Ä–µ—á–Ω–æ–º—É –ø—Ä–æ–±–µ–ª—É
    try:
        category, name = command.args.split(" ", maxsplit=1)
        if category.count("<") + category.count(">") != 2:
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
                "/save <–ö–∞—Ç–µ–≥–æ—Ä–∏—è> <–ù–∞–∑–≤–∞–Ω–∏–µ>"
            )
        elif name.count("<") + name.count(">") != 2:
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
                "/save <–ö–∞—Ç–µ–≥–æ—Ä–∏—è> <–ù–∞–∑–≤–∞–Ω–∏–µ>"
            )
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –º–µ–Ω—å—à–µ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π, –≤—ã–ª–µ—Ç–∏—Ç ValueError
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/save <–ö–∞—Ç–µ–≥–æ—Ä–∏—è> <–ù–∞–∑–≤–∞–Ω–∏–µ>"
        )
        return
    global sort
    sort.slovar(category, name, str(message.message_id), str(message.chat.id))

    
#–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@dp.message(Command("savedfiles"))
async def main(message, state):
    global sort
    slova = ""
    await message.answer(savedfiles_command + sort.keyses(slova) + savedfiles_command_continue)
    await state.set_state(states.categor)

categor = ''

@dp.message(F.text, states.categor)
async def main(message, state):
    global sort, categor
    slova = ""
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –Ω–∞—à–µ–º –∫–ª–∞—Å—Å–µ –∑–Ω–∞—á–µ–Ω–∏–µ categor
    await state.update_data(categor = message.text)
    categor = await state.get_data()
    await message.answer(categories_message + sort.valueses(slova, categor['categor']) + categories_message_continue)
    await state.set_state(states.name)

@dp.message(F.text, states.name)
async def main(message, state):
    global sort, categor
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –Ω–∞—à–µ–º –∫–ª–∞—Å—Å–µ –∑–Ω–∞—á–µ–Ω–∏–µ categor
    await state.update_data(name = message.text)
    name = await state.get_data()
    #–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID
    chat_id = sort.dict[categor['categor']][name['name']]["chat"]
    message_id = sort.dict[categor['categor']][name['name']]["message"]
    await bot.send_message(chat_id, "–í–æ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_to_message_id=message_id)
    await state.clear()


# –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç (STT)
@dp.message(F.content_type == ContentType.VOICE)
async def audio(message):
    # Download audio file
    file_id = await bot.get_file(message.voice.file_id)
    await bot.download_file(file_id.file_path, "audio.ogg")

    # Speech-to-Text convertation
    text = STT("audio.ogg")

    await message.reply(text)


# –ü–∞—Å—Ö–∞–ª–∫–∞ —Å –ò–≥–æ—Ä–µ–º
@dp.message(F.content_type == ContentType.TEXT)
async def Hello(message):
    if "–∏ —á—ë" in message.text.lower() or "–∏ —á–µ" in message.text.lower():
        await bot.send_sticker(
            message.chat.id,
            sticker="CAACAgIAAxkBAAJtC2WhNs5jRDj39GBrG9LGAUFt0U8sAAIvKgACWTYQSgyguNjuPct4NAQ",
        )


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ –±–æ—Ç–µ
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
